<channel version="3.5.1">
  <id>00680d42-b755-42ec-9957-08ae467c47c9</id>
  <nextMetaDataId>10</nextMetaDataId>
  <name>Data Store</name>
  <description></description>
  <revision>1</revision>
  <sourceConnector version="3.5.1">
    <metaDataId>0</metaDataId>
    <name>sourceConnector</name>
    <properties class="com.mirth.connect.connectors.js.JavaScriptReceiverProperties" version="3.5.1">
      <pluginProperties/>
      <pollConnectorProperties version="3.5.1">
        <pollingType>INTERVAL</pollingType>
        <pollOnStart>false</pollOnStart>
        <pollingFrequency>500</pollingFrequency>
        <pollingHour>0</pollingHour>
        <pollingMinute>0</pollingMinute>
        <cronJobs/>
        <pollConnectorPropertiesAdvanced>
          <weekly>true</weekly>
          <inactiveDays>
            <boolean>false</boolean>
            <boolean>false</boolean>
            <boolean>false</boolean>
            <boolean>false</boolean>
            <boolean>false</boolean>
            <boolean>false</boolean>
            <boolean>false</boolean>
            <boolean>false</boolean>
          </inactiveDays>
          <dayOfMonth>1</dayOfMonth>
          <allDay>true</allDay>
          <startingHour>8</startingHour>
          <startingMinute>0</startingMinute>
          <endingHour>17</endingHour>
          <endingMinute>0</endingMinute>
        </pollConnectorPropertiesAdvanced>
      </pollConnectorProperties>
      <sourceConnectorProperties version="3.5.1">
        <responseVariable>None</responseVariable>
        <respondAfterProcessing>true</respondAfterProcessing>
        <processBatch>true</processBatch>
        <firstResponse>false</firstResponse>
        <processingThreads>1</processingThreads>
        <resourceIds class="linked-hash-map">
          <entry>
            <string>Default Resource</string>
            <string>[Default Resource]</string>
          </entry>
        </resourceIds>
        <queueBufferSize>1000</queueBufferSize>
      </sourceConnectorProperties>
      <script>var folder = new Packages.java.io.File($(&apos;CDS_Source_Dir&apos;));
var listOfFiles = folder.listFiles();

for each (file in listOfFiles) {
	if (file.isFile()) {
		return false;
	}
}

return recordsToProcess();</script>
    </properties>
    <transformer version="3.5.1">
      <elements>
        <com.mirth.connect.plugins.mapper.MapperStep>
          <name>recordsToProcess</name>
          <sequenceNumber>0</sequenceNumber>
          <variable>recordsToProcess</variable>
          <mapping>msg[&apos;row&apos;][&apos;column1&apos;].toString();</mapping>
          <defaultValue></defaultValue>
          <replacements/>
          <scope>CHANNEL</scope>
        </com.mirth.connect.plugins.mapper.MapperStep>
      </elements>
      <inboundTemplate encoding="base64"></inboundTemplate>
      <outboundTemplate encoding="base64">ewogICJjYXNlSWQiOiAiIiwKICAic2l0ZSI6ICIiLAogICJlcGlzb2RlcyI6IFsKICAgIHsKICAg
ICAgImVwaXNvZGVEYXRlIjogIiIsCiAgICAgICJhdHRyaWJ1dGVXaXRoVmFsdWVzIjogWwogICAg
ICAgIHsKICAgICAgICAgICJuYW1lIjogIm1zaC5zZW5kaW5nIGFwcGxpY2F0aW9uIiwKICAgICAg
ICAgICJ2YWx1ZSI6ICIiCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAibmFtZSI6ICJt
c2guc2VuZGluZyBmYWNpbGl0eSIsCiAgICAgICAgICAidmFsdWUiOiAiIgogICAgICAgIH0sCiAg
ICAgICAgewogICAgICAgICAgIm5hbWUiOiAibXNoLnJlY2VpdmluZyBhcHBsaWNhdGlvbiIsCiAg
ICAgICAgICAidmFsdWUiOiAiIgogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgIm5hbWUi
OiAibXNoLnJlY2VpdmluZyBmYWNpbGl0eSIsCiAgICAgICAgICAidmFsdWUiOiAiIgogICAgICAg
IH0sCiAgICAgICAgewogICAgICAgICAgIm5hbWUiOiAicGlkLmV4dGVybmFsIHBhdGllbnQgaWQi
LAogICAgICAgICAgInZhbHVlIjogIiIKICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJu
YW1lIjogInBpZC5pbnRlcm5hbCBwYXRpZW50IGlkIiwKICAgICAgICAgICJ2YWx1ZSI6ICIiCiAg
ICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAibmFtZSI6ICJwaWQucGF0aWVudCBuYW1lIiwK
ICAgICAgICAgICJ2YWx1ZSI6ICIiCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAibmFt
ZSI6ICJwaWQuZGF0ZS90aW1lIG9mIGJpcnRoIiwKICAgICAgICAgICJ2YWx1ZSI6ICIiCiAgICAg
ICAgfSwKICAgICAgICB7CiAgICAgICAgICAibmFtZSI6ICJwaWQuc2V4IiwKICAgICAgICAgICJ2
YWx1ZSI6ICIiCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAibmFtZSI6ICJwaWQuYmly
dGggb3JkZXIiLAogICAgICAgICAgInZhbHVlIjogIiIKICAgICAgICB9LAogICAgICAgIHsKICAg
ICAgICAgICJuYW1lIjogInBpZC5hZ2UgeWVhcnMiLAogICAgICAgICAgInZhbHVlIjogIiIKICAg
ICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJuYW1lIjogInBpZC5hZ2UgZGF5cyIsCiAgICAg
ICAgICAidmFsdWUiOiAiIgogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgIm5hbWUiOiAi
cHYxLnNldCBpZCIsCiAgICAgICAgICAidmFsdWUiOiAiIgogICAgICAgIH0sCiAgICAgICAgewog
ICAgICAgICAgIm5hbWUiOiAicHYxLnBhdGllbnQgY2xhc3MiLAogICAgICAgICAgInZhbHVlIjog
IiIKICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJuYW1lIjogInB2MS5hc3NpZ25lZCBs
b2NhdGlvbiIsCiAgICAgICAgICAidmFsdWUiOiAiIgogICAgICAgIH0sCiAgICAgICAgewogICAg
ICAgICAgIm5hbWUiOiAicHYxLmFkbWl0dGluZyBkb2N0b3IiLAogICAgICAgICAgInZhbHVlIjog
IiIKICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJuYW1lIjogInB2MS5wYXRpZW50IHR5
cGUiLAogICAgICAgICAgInZhbHVlIjogIiIKICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAg
ICJuYW1lIjogInB2MS52aXNpdCBudW1iZXIiLAogICAgICAgICAgInZhbHVlIjogIiIKICAgICAg
ICB9LAogICAgICAgIHsKICAgICAgICAgICJuYW1lIjogInB2MS5maW5hbmNpYWwgY2xhc3MiLAog
ICAgICAgICAgInZhbHVlIjogIiIKICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJuYW1l
IjogInB2MS5zZXJ2aWNpbmcgZmFjaWxpdHkiLAogICAgICAgICAgInZhbHVlIjogIiIKICAgICAg
ICB9LAogICAgICAgIHsKICAgICAgICAgICJuYW1lIjogInB2MS5hY2NvdW50IHN0YXR1cyIsCiAg
ICAgICAgICAidmFsdWUiOiAiIgogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgIm5hbWUi
OiAicHYxLmFkbWl0IGRhdGUvdGltZSIsCiAgICAgICAgICAidmFsdWUiOiAiIgogICAgICAgIH0s
CiAgICAgICAgewogICAgICAgICAgIm5hbWUiOiAib2JyLnBsYWNlciBvcmRlciBudW1iZXIiLAog
ICAgICAgICAgInZhbHVlIjogIl4iCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAibmFt
ZSI6ICJvYnIudW5pdmVyc2FsIHNlcnZpY2UgaWQiLAogICAgICAgICAgInZhbHVlIjogIiIKICAg
ICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJuYW1lIjogIm9ici5vYnNlcnZhdGlvbiBkYXRl
L3RpbWUiLAogICAgICAgICAgInZhbHVlIjogIiIKICAgICAgICB9LAogICAgICAgIHsKICAgICAg
ICAgICJuYW1lIjogIm9ici5zcGVjaW1lbiBhY3Rpb24gY29kZSIsCiAgICAgICAgICAidmFsdWUi
OiAiIgogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgIm5hbWUiOiAib2JyLnNwZWNpbWVu
IHJlY2VpdmVkIGRhdGUvdGltZSIsCiAgICAgICAgICAidmFsdWUiOiAiIgogICAgICAgIH0sCiAg
ICAgICAgewogICAgICAgICAgIm5hbWUiOiAib2JyLnNwZWNpbWVuIHNvdXJjZSIsCiAgICAgICAg
ICAidmFsdWUiOiAiXl5eXl4iCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAibmFtZSI6
ICJvYnIub3JkZXJpbmcgcHJvdmlkZXIiLAogICAgICAgICAgInZhbHVlIjogIiIKICAgICAgICB9
LAogICAgICAgIHsKICAgICAgICAgICJuYW1lIjogIm9ici5maWxsZXIgZmllbGQgMSIsCiAgICAg
ICAgICAidmFsdWUiOiAiIgogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgIm5hbWUiOiAi
b2JyLnJlc3VsdHMgZGF0ZS90aW1lIiwKICAgICAgICAgICJ2YWx1ZSI6ICIiCiAgICAgICAgfSwK
ICAgICAgICB7CiAgICAgICAgICAibmFtZSI6ICJvYnIuZGlhZ25vc3RpYyBzZWN0IGlkIiwKICAg
ICAgICAgICJ2YWx1ZSI6ICIiCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAibmFtZSI6
ICJvYnIucXVhbnRpdHkvdGltaW5nIG9yZGVyIGRhdGUiLAogICAgICAgICAgInZhbHVlIjogIiIK
ICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJuYW1lIjogIm9ici5xdWFudGl0eS90aW1p
bmcgcHJpb3JpdHkiLAogICAgICAgICAgInZhbHVlIjogIn4iCiAgICAgICAgfSwKICAgICAgICB7
CiAgICAgICAgICAibmFtZSI6ICJvYnIuc2NoZWR1bGVkIGRhdGUvdGltZSIsCiAgICAgICAgICAi
dmFsdWUiOiAiIgogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgIm5hbWUiOiAiUElEX0dp
dmVuTmFtZSIsCiAgICAgICAgICAidmFsdWUiOiAiIgogICAgICAgIH0sCiAgICAgICAgewogICAg
ICAgICAgIm5hbWUiOiAiUElEX1N1cm5hbWUiLAogICAgICAgICAgInZhbHVlIjogIiIKICAgICAg
ICB9LAogICAgICAgIHsKICAgICAgICAgICJuYW1lIjogIlBJRF9EYXRlT2ZCaXJ0aCIsCiAgICAg
ICAgICAidmFsdWUiOiAiIgogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgIm5hbWUiOiAi
T1JDX1BsYWNlck9yZGVyTnVtYmVyIiwKICAgICAgICAgICJ2YWx1ZSI6ICIiCiAgICAgICAgfSwK
ICAgICAgICB7CiAgICAgICAgICAibmFtZSI6ICJPcmRlcmVkIiwKICAgICAgICAgICJ2YWx1ZSI6
ICIiCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAibmFtZSI6ICJPQlJfUmVmZXJyaW5n
RHJDb2RlIiwKICAgICAgICAgICJ2YWx1ZSI6ICIiCiAgICAgICAgfSwKICAgICAgICB7CiAgICAg
ICAgICAibmFtZSI6ICJPQlJfUmVmZXJyaW5nRHJOYW1lIiwKICAgICAgICAgICJ2YWx1ZSI6ICIi
CiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAibmFtZSI6ICJPQlJfQ29sbGVjdGVkRGF0
ZSIsCiAgICAgICAgICAidmFsdWUiOiAiIgogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAg
Im5hbWUiOiAiT0JSX0NvbGxlY3RlZFRpbWUiLAogICAgICAgICAgInZhbHVlIjogIiIKICAgICAg
ICB9LAogICAgICAgIHsKICAgICAgICAgICJuYW1lIjogIk9CUl9SZWNlaXZlZERhdGUiLAogICAg
ICAgICAgInZhbHVlIjogIiIKICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJuYW1lIjog
Ik9CUl9SZWNlaXZlZFRpbWUiLAogICAgICAgICAgInZhbHVlIjogIiIKICAgICAgICB9LAogICAg
ICAgIHsKICAgICAgICAgICJuYW1lIjogIk9CUl9TY2hlZHVsZWREYXRlIiwKICAgICAgICAgICJ2
YWx1ZSI6ICIiCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAibmFtZSI6ICJPQlJfU2No
ZWR1bGVkVGltZSIsCiAgICAgICAgICAidmFsdWUiOiAiIgogICAgICAgIH0sCiAgICAgICAgewog
ICAgICAgICAgIm5hbWUiOiAiT0JSX1ByaW9yaXR5IiwKICAgICAgICAgICJ2YWx1ZSI6ICIiCiAg
ICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAibmFtZSI6ICJHRU4gTEFCX1NwZWNpbWVuUmVj
ZWl2ZWRUaW1lIiwKICAgICAgICAgICJ2YWx1ZSI6ICIiCiAgICAgICAgfSwKICAgICAgICB7CiAg
ICAgICAgICAibmFtZSI6ICJHRU4gTEFCX1NwZWNpbWVuUmVjZWl2ZWREYXRlIiwKICAgICAgICAg
ICJ2YWx1ZSI6ICIiCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAibmFtZSI6ICJvcmMu
b3JkZXIgc3RhdHVzIiwKICAgICAgICAgICJ2YWx1ZSI6ICIiCiAgICAgICAgfSwKICAgICAgICB7
CiAgICAgICAgICAibmFtZSI6ICJvcmMuZGF0ZS90aW1lIG9mIHRyYW5zYWN0aW9uIiwKICAgICAg
ICAgICJ2YWx1ZSI6ICIiCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAibmFtZSI6ICJv
cmMuZW50ZXJlZCIsCiAgICAgICAgICAidmFsdWUiOiAiIgogICAgICAgIH0sCiAgICAgICAgewog
ICAgICAgICAgIm5hbWUiOiAib3JjLm9yZGVyaW5nIHByb3ZpZGVyIiwKICAgICAgICAgICJ2YWx1
ZSI6ICIiCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAibmFtZSI6ICJvcmMub3JkZXIg
ZWZmZWN0aXZlIGRhdGUvdGltZSIsCiAgICAgICAgICAidmFsdWUiOiAiIgogICAgICAgIH0sCiAg
ICAgICAgewogICAgICAgICAgIm5hbWUiOiAib3JjLmVudGVyaW5nIGRldmljZSIsCiAgICAgICAg
ICAidmFsdWUiOiAiIgogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgIm5hbWUiOiAib3Jj
LmFjdGlvbiBieSIsCiAgICAgICAgICAidmFsdWUiOiAiIgogICAgICAgIH0sCiAgICAgICAgewog
ICAgICAgICAgIm5hbWUiOiAiT1JDX0VudGVyZWRCeU5hbWUiLAogICAgICAgICAgInZhbHVlIjog
IiIKICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJuYW1lIjogIlBhbmVsIiwKICAgICAg
ICAgICJ2YWx1ZSI6ICJERSIKICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICJuYW1lIjog
IkNhc2VOYW1lIiwKICAgICAgICAgICJ2YWx1ZSI6ICIiCiAgICAgICAgfSwKICAgICAgICB7CiAg
ICAgICAgICAibmFtZSI6ICJFcGlzb2RlX0RhdGVfVGltZSIsCiAgICAgICAgICAidmFsdWUiOiAi
IgogICAgICAgIH0KICAgICAgXQogICAgfQogIF0KfQ==</outboundTemplate>
      <inboundDataType>DELIMITED</inboundDataType>
      <outboundDataType>RAW</outboundDataType>
      <inboundProperties class="com.mirth.connect.plugins.datatypes.delimited.DelimitedDataTypeProperties" version="3.5.1">
        <serializationProperties class="com.mirth.connect.plugins.datatypes.delimited.DelimitedSerializationProperties" version="3.5.1">
          <columnDelimiter>,</columnDelimiter>
          <recordDelimiter>\n</recordDelimiter>
          <quoteToken>&quot;</quoteToken>
          <escapeWithDoubleQuote>true</escapeWithDoubleQuote>
          <quoteEscapeToken>\</quoteEscapeToken>
          <numberedRows>false</numberedRows>
          <ignoreCR>true</ignoreCR>
        </serializationProperties>
        <deserializationProperties class="com.mirth.connect.plugins.datatypes.delimited.DelimitedDeserializationProperties" version="3.5.1">
          <columnDelimiter>,</columnDelimiter>
          <recordDelimiter>\n</recordDelimiter>
          <quoteToken>&quot;</quoteToken>
          <escapeWithDoubleQuote>true</escapeWithDoubleQuote>
          <quoteEscapeToken>\</quoteEscapeToken>
        </deserializationProperties>
        <batchProperties class="com.mirth.connect.plugins.datatypes.delimited.DelimitedBatchProperties" version="3.5.1">
          <splitType>Record</splitType>
          <batchSkipRecords>0</batchSkipRecords>
          <batchMessageDelimiter></batchMessageDelimiter>
          <batchMessageDelimiterIncluded>false</batchMessageDelimiterIncluded>
          <batchGroupingColumn></batchGroupingColumn>
          <batchScript></batchScript>
        </batchProperties>
      </inboundProperties>
      <outboundProperties class="com.mirth.connect.plugins.datatypes.raw.RawDataTypeProperties" version="3.5.1">
        <batchProperties class="com.mirth.connect.plugins.datatypes.raw.RawBatchProperties" version="3.5.1">
          <splitType>JavaScript</splitType>
          <batchScript></batchScript>
        </batchProperties>
      </outboundProperties>
    </transformer>
    <filter version="3.5.1">
      <elements/>
    </filter>
    <transportName>JavaScript Reader</transportName>
    <mode>SOURCE</mode>
    <enabled>true</enabled>
    <waitForPrevious>true</waitForPrevious>
  </sourceConnector>
  <destinationConnectors>
    <connector version="3.5.1">
      <metaDataId>8</metaDataId>
      <name>Select_CDS_Data</name>
      <properties class="com.mirth.connect.connectors.js.JavaScriptDispatcherProperties" version="3.5.1">
        <pluginProperties/>
        <destinationConnectorProperties version="3.5.1">
          <queueEnabled>false</queueEnabled>
          <sendFirst>false</sendFirst>
          <retryIntervalMillis>10000</retryIntervalMillis>
          <regenerateTemplate>false</regenerateTemplate>
          <retryCount>0</retryCount>
          <rotate>false</rotate>
          <includeFilterTransformer>false</includeFilterTransformer>
          <threadCount>1</threadCount>
          <threadAssignmentVariable></threadAssignmentVariable>
          <validateResponse>false</validateResponse>
          <resourceIds class="linked-hash-map">
            <entry>
              <string>Default Resource</string>
              <string>[Default Resource]</string>
            </entry>
          </resourceIds>
          <queueBufferSize>1000</queueBufferSize>
          <reattachAttachments>true</reattachAttachments>
        </destinationConnectorProperties>
        <script>var result = channelMap.get(&apos;recordsToProcess&apos;);
if (result == &apos;true&apos;){
	result = Select_CDS_Data();
	channelMap.put(&apos;recordsToProcess&apos;, result.toString());
}</script>
      </properties>
      <transformer version="3.5.1">
        <elements/>
        <inboundDataType>RAW</inboundDataType>
        <outboundDataType>JSON</outboundDataType>
        <inboundProperties class="com.mirth.connect.plugins.datatypes.raw.RawDataTypeProperties" version="3.5.1">
          <batchProperties class="com.mirth.connect.plugins.datatypes.raw.RawBatchProperties" version="3.5.1">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </inboundProperties>
        <outboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.5.1">
          <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.5.1">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </outboundProperties>
      </transformer>
      <responseTransformer version="3.5.1">
        <elements/>
        <inboundDataType>JSON</inboundDataType>
        <outboundDataType>JSON</outboundDataType>
        <inboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.5.1">
          <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.5.1">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </inboundProperties>
        <outboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.5.1">
          <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.5.1">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </outboundProperties>
      </responseTransformer>
      <filter version="3.5.1">
        <elements/>
      </filter>
      <transportName>JavaScript Writer</transportName>
      <mode>DESTINATION</mode>
      <enabled>true</enabled>
      <waitForPrevious>true</waitForPrevious>
    </connector>
    <connector version="3.5.1">
      <metaDataId>9</metaDataId>
      <name>Start_File_Reader_Channel</name>
      <properties class="com.mirth.connect.connectors.js.JavaScriptDispatcherProperties" version="3.5.1">
        <pluginProperties/>
        <destinationConnectorProperties version="3.5.1">
          <queueEnabled>false</queueEnabled>
          <sendFirst>false</sendFirst>
          <retryIntervalMillis>10000</retryIntervalMillis>
          <regenerateTemplate>false</regenerateTemplate>
          <retryCount>0</retryCount>
          <rotate>false</rotate>
          <includeFilterTransformer>false</includeFilterTransformer>
          <threadCount>1</threadCount>
          <threadAssignmentVariable></threadAssignmentVariable>
          <validateResponse>false</validateResponse>
          <resourceIds class="linked-hash-map">
            <entry>
              <string>Default Resource</string>
              <string>[Default Resource]</string>
            </entry>
          </resourceIds>
          <queueBufferSize>1000</queueBufferSize>
          <reattachAttachments>true</reattachAttachments>
        </destinationConnectorProperties>
        <script>result = channelMap.get(&apos;recordsToProcess&apos;);
if (result != &apos;true&apos;) {
	Start_File_Reader();
}</script>
      </properties>
      <transformer version="3.5.1">
        <elements/>
        <inboundDataType>RAW</inboundDataType>
        <outboundDataType>JSON</outboundDataType>
        <inboundProperties class="com.mirth.connect.plugins.datatypes.raw.RawDataTypeProperties" version="3.5.1">
          <batchProperties class="com.mirth.connect.plugins.datatypes.raw.RawBatchProperties" version="3.5.1">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </inboundProperties>
        <outboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.5.1">
          <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.5.1">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </outboundProperties>
      </transformer>
      <responseTransformer version="3.5.1">
        <elements/>
        <inboundDataType>JSON</inboundDataType>
        <outboundDataType>JSON</outboundDataType>
        <inboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.5.1">
          <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.5.1">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </inboundProperties>
        <outboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.5.1">
          <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.5.1">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </outboundProperties>
      </responseTransformer>
      <filter version="3.5.1">
        <elements/>
      </filter>
      <transportName>JavaScript Writer</transportName>
      <mode>DESTINATION</mode>
      <enabled>false</enabled>
      <waitForPrevious>true</waitForPrevious>
    </connector>
  </destinationConnectors>
  <preprocessingScript>// Modify the message variable below to pre process data
return message;</preprocessingScript>
  <postprocessingScript>// This script executes once after a message has been processed
// Responses returned from here will be stored as &quot;Postprocessor&quot; in the response map
return;</postprocessingScript>
  <deployScript>// This script executes once when the channel is deployed
// You only have access to the globalMap and globalChannelMap here to persist data
return;</deployScript>
  <undeployScript>// This script executes once when the channel is undeployed
// You only have access to the globalMap and globalChannelMap here to persist data
return;</undeployScript>
  <properties version="3.5.1">
    <clearGlobalChannelMap>true</clearGlobalChannelMap>
    <messageStorageMode>DISABLED</messageStorageMode>
    <encryptData>false</encryptData>
    <removeContentOnCompletion>false</removeContentOnCompletion>
    <removeOnlyFilteredOnCompletion>false</removeOnlyFilteredOnCompletion>
    <removeAttachmentsOnCompletion>false</removeAttachmentsOnCompletion>
    <initialState>STARTED</initialState>
    <storeAttachments>false</storeAttachments>
    <metaDataColumns>
      <metaDataColumn>
        <name>SOURCE</name>
        <type>STRING</type>
        <mappingName>mirth_source</mappingName>
      </metaDataColumn>
      <metaDataColumn>
        <name>TYPE</name>
        <type>STRING</type>
        <mappingName>mirth_type</mappingName>
      </metaDataColumn>
    </metaDataColumns>
    <attachmentProperties version="3.5.1">
      <type>None</type>
      <properties/>
    </attachmentProperties>
    <resourceIds class="linked-hash-map">
      <entry>
        <string>Default Resource</string>
        <string>[Default Resource]</string>
      </entry>
    </resourceIds>
  </properties>
  <exportData>
    <metadata>
      <enabled>true</enabled>
      <lastModified>
        <time>1542588377724</time>
        <timezone>Australia/Sydney</timezone>
      </lastModified>
      <pruningSettings>
        <pruneMetaDataDays>1</pruneMetaDataDays>
        <pruneContentDays>1</pruneContentDays>
        <archiveEnabled>false</archiveEnabled>
      </pruningSettings>
    </metadata>
    <codeTemplateLibraries>
      <codeTemplateLibrary version="3.5.1">
        <id>be8c75bc-37f7-48dc-a26e-b9e50c6f285a</id>
        <name>PKS CDS</name>
        <revision>1</revision>
        <lastModified>
          <time>1542588102822</time>
          <timezone>Australia/Sydney</timezone>
        </lastModified>
        <description></description>
        <includeNewChannels>false</includeNewChannels>
        <enabledChannelIds>
          <string>00680d42-b755-42ec-9957-08ae467c47c9</string>
          <string>838cdb58-cd3d-4797-8dd6-b4121788e3d2</string>
          <string>6df4f01c-e2ee-400b-8f23-547df6db1358</string>
          <string>7d58b0b3-0cef-4430-b961-132df6a81f2d</string>
          <string>e587470e-5f72-4c81-842e-3e1339eb1201</string>
        </enabledChannelIds>
        <disabledChannelIds>
          <string>986eb897-48ee-4c13-a49e-5fe992750df4</string>
          <string>05c4aca3-6525-46ce-bbe6-f24587a6b797</string>
          <string>4ad0d0dd-e291-4499-a9d5-dbff3da6a6eb</string>
          <string>6b208dbe-9531-4997-80d8-7925e426efc3</string>
        </disabledChannelIds>
        <codeTemplates>
          <codeTemplate version="3.5.1">
            <id>ecf96a6d-b5d6-4c13-b16a-c31a253cb9bb</id>
            <name>Get_CDS_Connection</name>
            <revision>1</revision>
            <lastModified>
              <time>1531661693178</time>
              <timezone>Australia/Sydney</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>CHANNEL_DEPLOY</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
JavaScript function to centralise creation of a database connection. The
connection won&apos;t be open, the caller still needs to do this but all constants
will be instantiated here

@return dbConn returns an instance of a returns a new DatabaseConnection object
*/
function Get_CDS_Connection() {
var dbConn = $gc(&apos;dbConn&apos;);

if (!dbConn || dbConn.getConnection().isClosed()) {
var dbConn = DatabaseConnectionFactory.createDatabaseConnection($(&apos;CDS_Driver_Name&apos;), $(&apos;CDS_DB_URL&apos;), $(&apos;CDS_DB_UserName&apos;), $(&apos;CDS_DB_Password&apos;));
$gc(&apos;dbConn&apos;, dbConn);
}

return dbConn;
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.5.1">
            <id>8e116c30-555e-4d03-97c8-0dd649526eda</id>
            <name>Get_Latest_Episode_For_EpisodeID</name>
            <revision>1</revision>
            <lastModified>
              <time>1531661693138</time>
              <timezone>Australia/Sydney</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>CHANNEL_DEPLOY</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>
				function get_latest_episode_for_episodeID(episodeIDList) {
				  var dbConn = Get_CDS_Connection();
				  var sql = &quot;SELECT * FROM cds_data WHERE EpisodeID = ? ORDER BY EpisodeDateTime DESC LIMIT 1&quot;;
				  var latestEpisode = &quot;&quot;;
				  	try {
				  		var latestEpisode = dbConn.executeCachedQuery(sql, episodeIDList);
				  	} catch (exception) {
				  		logger.error(&quot;Error when inserting data: &quot; + exception);
				  	} finally {
				  		dbConn.close();
				  	}
				  return latestEpisode;
				}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.5.1">
            <id>5c27c0de-56d5-4eb9-bc17-a5ad0805f34a</id>
            <name>Insert_CDS_Data</name>
            <revision>1</revision>
            <lastModified>
              <time>1531661693065</time>
              <timezone>Australia/Sydney</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>CHANNEL_PREPROCESSOR</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>GLOBAL_PREPROCESSOR</contextType>
                <contextType>CHANNEL_DEPLOY</contextType>
                <contextType>GLOBAL_POSTPROCESSOR</contextType>
                <contextType>CHANNEL_POSTPROCESSOR</contextType>
                <contextType>CHANNEL_ATTACHMENT</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>GLOBAL_DEPLOY</contextType>
                <contextType>GLOBAL_UNDEPLOY</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>CHANNEL_BATCH</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>// Insert CDS data into rd_staging.cds_data from flat file source

function Insert_CDS_Data(PatientID,PatientFamilyName,PatientGivenName,PatientTitle,PatientDOB,PatientSex,PatientStreetAddress,PatientCity,PatientPostalCode,PatientState,PatientCountry,PatientStatus,PatientPregnancyFlag,PatientFastingFlag,EpisodeID,EpisodeOrderedTests, EpisodeDateTime,EpisodeClinicalNotes,AccountType,AccountClass,BillTo,BillingAddress,PatientPublicHealthIdentifier,EpisodePublicScheduleCode,PatientPrivateHealthFundName,PatientPrivateHealthFundID,ReqPhysicianID,ReqPhysicianName,ReqPhysicianSpeciality,ReqPhysicianDeliveryAddress,SugeryName,SurgeryCode,SurgeryAddress,SurgeryPostalCode,CopyPhysicianIDList,CopyPhysicianNameList,PanelIndicator,PanelID,PanelName,SampleID,SampleFluidType,SampleOriginLocation,SampleOriginSubLocation,SampleCollectionDateTime,SampleCollectionMethod,TestSiteSampleReceivedDateTime,TestLISCode,TestLISName,TestValue,TestNormalRange,TestUnits,TestPriority,TestDepartment,TestInstrument,TestRequestSite,TestSite,TestType,AbnormalFlag,TestOrderedDateTime,TestAnalyzerCompletionDateTime,TestResultFirstReviewedDateTime,TestResultReleasedDateTime)
{

	try {
		var dbConn = Get_CDS_Connection();

		var _returnValue = 1;
		var _sqlQuery = &quot;CALL rd_staging.rdInsCDSData (&apos;&quot; + PatientID + &quot;&apos;&quot;+&quot;, \
									&apos;&quot; + PatientFamilyName + &quot;&apos;&quot;+&quot;, \
									&apos;&quot; + PatientGivenName + &quot;&apos;&quot;+&quot;, \
									&apos;&quot; + PatientTitle + &quot;&apos;&quot;+&quot;, \
									&apos;&quot; + PatientDOB + &quot;&apos;&quot;+&quot;, \
									&apos;&quot; + PatientSex + &quot;&apos;&quot;+&quot;, \
									&apos;&quot; + PatientStreetAddress + &quot;&apos;&quot;+&quot;, \
									&apos;&quot; + PatientCity + &quot;&apos;&quot;+&quot;, \
									&apos;&quot; + PatientPostalCode + &quot;&apos;&quot;+&quot;, \
									&apos;&quot; + PatientState + &quot;&apos;&quot;+&quot;, \
									&apos;&quot; + PatientCountry + &quot;&apos;&quot;+&quot;, \
									&apos;&quot; + PatientStatus + &quot;&apos;&quot;+&quot;, \
									&apos;&quot; + PatientPregnancyFlag + &quot;&apos;&quot;+&quot;, \
									&apos;&quot; + PatientFastingFlag + &quot;&apos;&quot;+&quot;, \
									&apos;&quot; + EpisodeID + &quot;&apos;&quot;+&quot;, \
									&apos;&quot; + EpisodeOrderedTests + &quot;&apos;&quot;
									+ &quot;, &quot; + buildStringIfNotNull(EpisodeDateTime) +&quot;, \
									&apos;&quot; + EpisodeClinicalNotes + &quot;&apos;&quot;+&quot;, \
									&apos;&quot; + AccountType + &quot;&apos;&quot;+&quot;, \
									&apos;&quot; + AccountClass + &quot;&apos;&quot;+&quot;, \
									&apos;&quot; + BillTo + &quot;&apos;&quot;+&quot;, \
									&apos;&quot; + BillingAddress + &quot;&apos;&quot;+&quot;, \
									&apos;&quot; + PatientPublicHealthIdentifier + &quot;&apos;, \
									&apos;&quot; + EpisodePublicScheduleCode + &quot;&apos;, \
									&apos;&quot; + PatientPrivateHealthFundName + &quot;&apos;, \
									&apos;&quot; + PatientPrivateHealthFundID + &quot;&apos;, \
									&apos;&quot; + ReqPhysicianID + &quot;&apos;, \
									&apos;&quot; + ReqPhysicianName + &quot;&apos;, \
									&apos;&quot; + ReqPhysicianSpeciality + &quot;&apos;, \
									&apos;&quot; + ReqPhysicianDeliveryAddress + &quot;&apos;, \
									&apos;&quot; + SugeryName + &quot;&apos;, \
									&apos;&quot; + SurgeryCode + &quot;&apos;, \
									&apos;&quot; + SurgeryAddress + &quot;&apos;, \
									&apos;&quot; + SurgeryPostalCode + &quot;&apos;, \
									&apos;&quot; + CopyPhysicianIDList + &quot;&apos;, \
									&apos;&quot; + CopyPhysicianNameList + &quot;&apos;, \
									&apos;&quot; + PanelIndicator + &quot;&apos;, \
									&apos;&quot; + PanelID + &quot;&apos;, \
									&apos;&quot; + PanelName + &quot;&apos;, \
									&apos;&quot; + SampleID + &quot;&apos;, \
									&apos;&quot; + SampleFluidType + &quot;&apos;, \
									&apos;&quot; + SampleOriginLocation + &quot;&apos;, \
									&apos;&quot; + SampleOriginSubLocation + &quot;&apos;, \
									&apos;&quot; + SampleCollectionDateTime + &quot;&apos;, \
									&apos;&quot; + SampleCollectionMethod + &quot;&apos;, \
									&apos;&quot; + TestSiteSampleReceivedDateTime + &quot;&apos;, \
									&apos;&quot; + TestLISCode + &quot;&apos;, \
									&apos;&quot; + TestLISName + &quot;&apos;, \
									&apos;&quot; + TestValue + &quot;&apos;, \
									&apos;&quot; + TestNormalRange + &quot;&apos;, \
									&apos;&quot; + TestUnits + &quot;&apos;, \
									&apos;&quot; + TestPriority + &quot;&apos;, \
									&apos;&quot; + TestDepartment + &quot;&apos;, \
									&apos;&quot; + TestInstrument + &quot;&apos;, \
									&apos;&quot; + TestRequestSite + &quot;&apos;, \
									&apos;&quot; + TestSite + &quot;&apos;, \
									&apos;&quot; + TestType + &quot;&apos;, \
									&apos;&quot; + AbnormalFlag + &quot;&apos;, \
									&apos;&quot; + TestOrderedDateTime + &quot;&apos;, \
									&apos;&quot; + TestAnalyzerCompletionDateTime + &quot;&apos;, \
									&apos;&quot; + TestResultFirstReviewedDateTime + &quot;&apos;, \
									&apos;&quot; + TestResultReleasedDateTime + &quot;&apos;)&quot;;

		var _sqlResult = dbConn.executeCachedQuery(_sqlQuery);

		if(_sqlResult.next()) {
			_returnValue = _sqlResult.getInt(1);
			_returnValue = parseInt(_returnValue, 10);
		}
		return _returnValue;
	}
	catch(ex) {
		logger.error(&quot;PKS - Insert_CDS_Data - Exception: &quot;+ ex);
		throw ex;
	}
	finally {
	//	dbConn.close();
	}
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.5.1">
            <id>c86e8913-8152-422e-aa5e-f63f7c25d279</id>
            <name>Insert_RippleDown_Response</name>
            <revision>1</revision>
            <lastModified>
              <time>1531661693289</time>
              <timezone>Australia/Sydney</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>CHANNEL_DEPLOY</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>function insert_rippleDown_response(patientID, patientFamilyName, patientGivenName, episodeId, episodeDateTime, testLISCode, testLISName, testValue, processed_YN) {
				      var params = new java.util.ArrayList();
			    	  params.add(patientID);
			    	  params.add(patientFamilyName);
			    	  params.add(patientGivenName);
			    	  params.add(episodeDateTime);
			    	  params.add(episodeId);
			    	  params.add(testLISCode);
			    	  params.add(testLISName);
			    	  params.add(testValue);
			    	  params.add(processed_YN);

				      var dbConn = Get_CDS_Connection();
				      var sql = &quot;INSERT INTO cds_data(PatientID, PatientFamilyName, PatientGivenName, EpisodeDateTime, EpisodeID, testLISCode, TestLISName, TestValue, Processed_YN) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)&quot;;
				      try {
				        var result = dbConn.executeUpdate(sql, params);
				      } catch (exception) {
				        logger.error(&quot;Error when inserting data: &quot; + exception);
				      } finally {
				        dbConn.close();
				      }
				  }</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.5.1">
            <id>519f869e-22ee-4082-8871-acd8b67e9240</id>
            <name>Peek_CDS_Data</name>
            <revision>1</revision>
            <lastModified>
              <time>1531661693245</time>
              <timezone>Australia/Sydney</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>CHANNEL_DEPLOY</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>function Check_Unprocessed_Data() {
	var dbConn = Get_CDS_Connection();
	var rowCount = 0;

	var sqlResult = null;
	try {
		var returnValue = 1;

		var sqlQuery = &quot;call rd_staging.rdSelCDSCount()&quot;;

		logger.trace(&quot;SQL &quot; + sqlQuery);

		sqlResult = dbConn.executeCachedQuery(sqlQuery);
		if (sqlResult.next()) {
			rowCount = sqlResult.getInt(&apos;StatusCode&apos;);
		}
	} finally {
		// Do nothing right now...
		if  (sqlResult != null) {
			//sqlResult.close();
		}
	}
	return rowCount;
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.5.1">
            <id>526bcc34-e16b-48cb-98b6-ca763bad259c</id>
            <name>Records_To_Process</name>
            <revision>1</revision>
            <lastModified>
              <time>1531661693203</time>
              <timezone>Australia/Sydney</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>CHANNEL_DEPLOY</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>function recordsToProcess() {
	if (Check_Unprocessed_Data() &gt; 0) {
		return true;
	} else {
		return false;
	}
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.5.1">
            <id>0f0fea61-ff2b-470f-9452-4d395117df82</id>
            <name>Select_CDS_Data</name>
            <revision>1</revision>
            <lastModified>
              <time>1531661693223</time>
              <timezone>Australia/Sydney</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>CHANNEL_DEPLOY</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>function Select_CDS_Data() {
	var currEpisodeID = &quot;&quot;;
	var currEpisode;
	var currPatientID = &quot;&quot;;
	var currStatus = &quot;&quot;;
	var episodes = [];
	var episodeSize = 0;
	var resp;

	var dbConn = Get_CDS_Connection();
	try {
		var sqlQuery = &quot;call rd_staging.rdSelCDSData()&quot;;

		var sqlResult = dbConn.executeCachedQuery(sqlQuery);
		// We can assume there will always be at least one row, even if there are no records to process
		// Let&apos;s check the result set
		var colCount = sqlResult.getMetaData().getColumnCount();
		// We&apos;re checking for the column count, if it is 2 then it&apos;s just a return code and message

		if (colCount == 2) {
			sqlResult.next();
			logger.trace(&quot;PKS - Select_CDS_Data - Info: &quot; + sqlResult.getString(&quot;Message&quot;));
			return false;
		} else {
			while (sqlResult.next()) {
				tmpEpisodeID		               = sqlResult.getString(&quot;EpisodeID&quot;);
				tmpEpisodeOrderedTests             = sqlResult.getString(&quot;EpisodeOrderedTests&quot;);
				tmpPatientID		               = sqlResult.getString(&quot;PatientID&quot;);
				tmpPatientSurname	               = sqlResult.getString(&quot;PatientFamilyName&quot;);
				tmpEpisodeDateTime   	          = sqlResult.getString(&quot;EpisodeDateTime&quot;);
				tmpPatientDOB		               = sqlResult.getString(&quot;PatientDOB&quot;);
				tmpTestSite		               = sqlResult.getString(&quot;TestSite&quot;);
				tmpPatientFamilyName               = sqlResult.getString(&quot;PatientFamilyName&quot;);
				tmpPatientGivenName                = sqlResult.getString(&quot;PatientGivenName&quot;);
				tmpPatientTitle                    = sqlResult.getString(&quot;PatientTitle&quot;);
				tmpPatientSex                      = sqlResult.getString(&quot;PatientSex&quot;);
				tmpPatientStreetAddress            = sqlResult.getString(&quot;PatientStreetAddress&quot;);
				tmpPatientCity                     = sqlResult.getString(&quot;PatientCity&quot;);
				tmpPatientPostalCode               = sqlResult.getString(&quot;PatientPostalCode&quot;);
				tmpPatientState                    = sqlResult.getString(&quot;PatientState&quot;);
				tmpPatientCountry                  = sqlResult.getString(&quot;PatientCountry&quot;);
				tmpPatientStatus                   = sqlResult.getString(&quot;PatientStatus&quot;);
				tmpPatientPregnancyFlag            = sqlResult.getString(&quot;PatientPregnancyFlag&quot;);
				tmpPatientFastingFlag              = sqlResult.getString(&quot;PatientFastingFlag&quot;);
				tmpEpisodeClinicalNotes            = sqlResult.getString(&quot;EpisodeClinicalNotes&quot;);
				tmpAccountType                     = sqlResult.getString(&quot;AccountType&quot;);
				tmpAccountClass                    = sqlResult.getString(&quot;AccountClass&quot;);
				tmpBillTo                          = sqlResult.getString(&quot;BillTo&quot;);
				tmpBillingAddress                  = sqlResult.getString(&quot;BillingAddress&quot;);
				tmpPatientPublicHealthIdentifier   = sqlResult.getString(&quot;PatientPublicHealthIdentifier&quot;);
				tmpEpisodePublicScheduleCode       = sqlResult.getString(&quot;EpisodePublicScheduleCode&quot;);
				tmpPatientPrivateHealthFundName    = sqlResult.getString(&quot;PatientPrivateHealthFundName&quot;);
				tmpPatientPrivateHealthFundID      = sqlResult.getString(&quot;PatientPrivateHealthFundID&quot;);
				tmpReqPhysicianID                  = sqlResult.getString(&quot;ReqPhysicianID&quot;);
				tmpReqPhysicianName                = sqlResult.getString(&quot;ReqPhysicianName&quot;);
				tmpReqPhysicianSpeciality          = sqlResult.getString(&quot;ReqPhysicianSpeciality&quot;);
				tmpReqPhysicianDeliveryAddress     = sqlResult.getString(&quot;ReqPhysicianDeliveryAddress&quot;);
				tmpSugeryName                      = sqlResult.getString(&quot;SugeryName&quot;);
				tmpSurgeryCode                     = sqlResult.getString(&quot;SurgeryCode&quot;);
				tmpSurgeryAddress                  = sqlResult.getString(&quot;SurgeryAddress&quot;);
				tmpSurgeryPostalCode               = sqlResult.getString(&quot;SurgeryPostalCode&quot;);
				tmpCopyPhysicianIDList             = sqlResult.getString(&quot;CopyPhysicianIDList&quot;);
				tmpCopyPhysicianNameList           = sqlResult.getString(&quot;CopyPhysicianNameList&quot;);
				tmpPanelIndicator                  = sqlResult.getString(&quot;PanelIndicator&quot;);
				tmpPanelID                         = sqlResult.getString(&quot;PanelID&quot;);
				tmpPanelName                       = sqlResult.getString(&quot;PanelName&quot;);
				tmpSampleID                        = sqlResult.getString(&quot;SampleID&quot;);
				tmpSampleFluidType                 = sqlResult.getString(&quot;SampleFluidType&quot;);
				tmpSampleOriginLocation            = sqlResult.getString(&quot;SampleOriginLocation&quot;);
				tmpSampleOriginSubLocation         = sqlResult.getString(&quot;SampleOriginSubLocation&quot;);
				tmpSampleCollectionDateTime        = sqlResult.getString(&quot;SampleCollectionDateTime&quot;);
				tmpSampleCollectionMethod          = sqlResult.getString(&quot;SampleCollectionMethod&quot;);
				tmpTestSiteSampleReceivedDateTime  = sqlResult.getString(&quot;TestSiteSampleReceivedDateTime&quot;);
				tmpTestPriority                    = sqlResult.getString(&quot;TestPriority&quot;);
				tmpTestDepartment                  = sqlResult.getString(&quot;TestDepartment&quot;);
				tmpTestInstrument                  = sqlResult.getString(&quot;TestInstrument&quot;);
				tmpTestRequestSite                 = sqlResult.getString(&quot;TestRequestSite&quot;);
				tmpTestSite                        = sqlResult.getString(&quot;TestSite&quot;);
				tmpTestType                        = sqlResult.getString(&quot;TestType&quot;);
				tmpAbnormalFlag                    = sqlResult.getString(&quot;AbnormalFlag&quot;);
				tmpTestOrderedDateTime             = sqlResult.getString(&quot;TestOrderedDateTime&quot;);
				tmpTestAnalyzerCompletionDateTime  = sqlResult.getString(&quot;TestAnalyzerCompletionDateTime&quot;);
				tmpTestResultFirstReviewedDateTime = sqlResult.getString(&quot;TestResultFirstReviewedDateTime&quot;);
				tmpTestResultReleasedDateTime      = sqlResult.getString(&quot;TestResultReleasedDateTime&quot;);
				tmpEpisodeDate		= DateUtil.getDate(&quot;yyyy-MM-dd HH:mm:ss&quot;, tmpEpisodeDateTime).getTime();

				// Check whether we moved onto a different episode, if we did and it hadn&apos;t already been processed then send a new
				// case...
				if ((tmpEpisodeID != currEpisodeID)) {
					if ($(&apos;cases_from_most_recent_episode_only&apos;) != &apos;true&apos;) {
						if (currEpisodeID != &quot;&quot;) {
							if (currStatus == &quot;N&quot;) {
								var currPatient = {&quot;caseId&quot;: currEpisodeID , site: &quot;&quot;, episodes: []};
								currPatient.episodes = episodes;
								// We&apos;re putting the batchSeq into the JSON message, the destination channel can split this out for use later
								// This is used for updating the records once the records are successfully sent to the web service
								var currMessage = {&quot;batchSeq&quot;: batchSeq, &quot;episodeID&quot;: currEpisodeID, Patient: currPatient};

								var json = JSON.stringify(currPatient);
								logger.trace(&quot;JSON Routing to REST CLIENT: &quot; + json);
								// Send the JSON Object to the Web Service channel
								resp = router.routeMessage(&quot;Rest Client&quot;, JSON.stringify(currMessage));
								if (resp) {
									logger.trace(&quot;Response from REST Channel: &quot; + resp.getMessage());
								}
							}
						}
					}

					episodeSize = episodes.push({episodeDate: tmpEpisodeDate,
											episodeId: tmpEpisodeID,
											attributeWithValues: [{externalName: &quot;PID&quot;, name: &quot;PID&quot;, value: tmpPatientID},
															{externalName: &quot;BIRTHDATE&quot;, name: &quot;BIRTHDATE&quot;, value: tmpPatientDOB},
															{externalName: &quot;LASTNAME&quot;, name: &quot;LASTNAME&quot;, value: tmpPatientSurname},
															{externalName: &quot;EpisodeOrderedTests&quot;, name: &quot;EpisodeOrderedTests&quot;, value: tmpEpisodeOrderedTests},
															{externalName: &quot;Site&quot;, name: &quot;Site&quot;, value: tmpTestSite},
															{externalName: &quot;PatientFamilyName&quot;, name : &quot;PatientFamilyName&quot;, value: tmpPatientFamilyName},
															{externalName: &quot;PatientGivenName&quot;, name : &quot;PatientGivenName&quot;, value: tmpPatientGivenName},
															{externalName: &quot;PatientTitle&quot;, name : &quot;PatientTitle&quot;, value: tmpPatientTitle},
															{externalName: &quot;PatientSex&quot;, name : &quot;PatientSex&quot;, value: tmpPatientSex},
															{externalName: &quot;PatientStreetAddress&quot;, name : &quot;PatientStreetAddress&quot;, value: tmpPatientStreetAddress},
															{externalName: &quot;PatientCity&quot;, name : &quot;PatientCity&quot;, value: tmpPatientCity},
															{externalName: &quot;PatientPostalCode&quot;, name : &quot;PatientPostalCode&quot;, value: tmpPatientPostalCode},
															{externalName: &quot;PatientState&quot;, name : &quot;PatientState&quot;, value: tmpPatientState},
															{externalName: &quot;PatientCountry&quot;, name : &quot;PatientCountry&quot;, value: tmpPatientCountry},
															{externalName: &quot;PatientStatus&quot;, name : &quot;PatientStatus&quot;, value: tmpPatientStatus},
															{externalName: &quot;PatientPregnancyFlag&quot;, name : &quot;PatientPregnancyFlag&quot;, value: tmpPatientPregnancyFlag},
															{externalName: &quot;PatientFastingFlag&quot;, name : &quot;PatientFastingFlag&quot;, value: tmpPatientFastingFlag}	,
															{externalName: &quot;PatientGivenName&quot;, name : &quot;externalName&quot;, value: tmpPatientGivenName},
															{externalName: &quot;EpisodeClinicalNotes&quot;, name: &quot;EpisodeClinicalNotes&quot;, value: tmpEpisodeClinicalNotes},
															{externalName: &quot;AccountType&quot;, name: &quot;AccountType&quot;, value: tmpAccountType},
															{externalName: &quot;AccountClass&quot;, name: &quot;AccountClass&quot;, value: tmpAccountClass},
															{externalName: &quot;BillTo&quot;, name: &quot;BillTo&quot;, value: tmpBillTo},
															{externalName: &quot;PatientPublicHealthIdentifier&quot;, name: &quot;PatientPublicHealthIdentifier&quot;, value: tmpPatientPublicHealthIdentifier},
															{externalName: &quot;EpisodePublicScheduleCode&quot;, name: &quot;EpisodePublicScheduleCode&quot;, value: tmpEpisodePublicScheduleCode},
															{externalName: &quot;PatientPrivateHealthFundName&quot;, name: &quot;PatientPrivateHealthFundName&quot;, value: tmpPatientPrivateHealthFundName},
															{externalName: &quot;PatientPrivateHealthFundID&quot;, name: &quot;PatientPrivateHealthFundID&quot;, value: tmpPatientPrivateHealthFundID},
															{externalName: &quot;ReqPhysicianID&quot;, name: &quot;ReqPhysicianID&quot;, value: tmpReqPhysicianID},
															{externalName: &quot;ReqPhysicianName&quot;, name: &quot;ReqPhysicianName&quot;, value: tmpReqPhysicianName},
															{externalName: &quot;ReqPhysicianSpeciality&quot;, name: &quot;ReqPhysicianSpeciality&quot;, value: tmpReqPhysicianSpeciality},
															{externalName: &quot;SugeryName&quot;, name: &quot;SugeryName&quot;, value: tmpSugeryName},
															{externalName: &quot;SurgeryCode&quot;, name: &quot;SurgeryCode&quot;, value: tmpSurgeryCode},
															{externalName: &quot;CopyPhysicianIDList&quot;, name: &quot;CopyPhysicianIDList&quot;, value: tmpCopyPhysicianIDList},
															{externalName: &quot;CopyPhysicianNameList&quot;, name: &quot;CopyPhysicianNameList&quot;, value: tmpCopyPhysicianNameList},
															{externalName: &quot;PanelIndicator&quot;, name: &quot;PanelIndicator&quot;, value: tmpPanelIndicator},
															{externalName: &quot;PanelID&quot;, name: &quot;PanelID&quot;, value: tmpPanelID},
															{externalName: &quot;PanelName&quot;, name: &quot;PanelName&quot;, value: tmpPanelName},
															{externalName: &quot;SampleID&quot;, name: &quot;SampleID&quot;, value: tmpSampleID},
															{externalName: &quot;SampleFluidType&quot;, name: &quot;SampleFluidType&quot;, value: tmpSampleFluidType},
															{externalName: &quot;SampleOriginLocation&quot;, name: &quot;SampleOriginLocation&quot;, value: tmpSampleOriginLocation},
															{externalName: &quot;SampleOriginSubLocation&quot;, name: &quot;SampleOriginSubLocation&quot;, value: tmpSampleOriginSubLocation},
															{externalName: &quot;SampleCollectionDateTime&quot;, name: &quot;SampleCollectionDateTime&quot;, value: tmpSampleCollectionDateTime},
															{externalName: &quot;SampleCollectionMethod&quot;, name: &quot;SampleCollectionMethod&quot;, value: tmpSampleCollectionMethod},
															{externalName: &quot;TestSiteSampleReceivedDateTime&quot;, name: &quot;TestSiteSampleReceivedDateTime&quot;, value: tmpTestSiteSampleReceivedDateTime},
															{externalName: &quot;TestPriority&quot;, name: &quot;TestPriority&quot;, value: tmpTestPriority},
															{externalName: &quot;TestRequestSite&quot;, name: &quot;TestRequestSite&quot;, value: tmpTestRequestSite},
															{externalName: &quot;TestSite&quot;, name: &quot;TestSite&quot;, value: tmpTestSite},
															{externalName: &quot;TestType&quot;, name: &quot;TestType&quot;, value: tmpTestType},
															{externalName: &quot;TestOrderedDateTime&quot;, name: &quot;TestOrderedDateTime&quot;, value: tmpTestOrderedDateTime}]});
				}

				currEpisodeID		= tmpEpisodeID;
				currStatus		= sqlResult.getString(&quot;Processed_YN&quot;);

				tmpTestLISCode		= sqlResult.getString(&quot;TestLISCode&quot;);
				tmpTestLISName		= sqlResult.getString(&quot;TestLISName&quot;);
				tmpTestValue		= sqlResult.getString(&quot;TestValue&quot;);
				tmpTestNormalRange	= sqlResult.getString(&quot;TestNormalRange&quot;);
				tmpTestUnits		= sqlResult.getString(&quot;TestUnits&quot;);
				// batchSeq is only used when processing the records with a status of &quot;N&quot;
				// well actually the records will have a status of &quot;P&quot; for processing
				// but they haven&apos;t already beenprocessed
				batchSeq					= sqlResult.getInt(&quot;BatchSeq&quot;);

				episodes[episodeSize - 1].attributeWithValues.push({externalName: tmpTestLISCode, name: tmpTestLISName, value: tmpTestValue,
														units: tmpTestUnits, range: tmpTestNormalRange});

				/* For testing only. The API fails when sending the acxtual tests from the incoming messages*/
				//episodes[episodeSize - 1].attributeWithValues.push({externalName: &quot;GTT 120m&quot;, name: &quot;GTTP 120min&quot;, value: &quot;6.7&quot;});

				if (tmpPatientID != currPatientID){
					currPatientID = tmpPatientID;
				}
			} //end while
			if (currStatus == &quot;N&quot;) {
				var currPatient = {&quot;caseId&quot;: currEpisodeID , site: &quot;&quot;, episodes: []};
				currPatient.episodes = episodes;
				var currMessage = {&quot;batchSeq&quot;: batchSeq, &quot;episodeID&quot;: currEpisodeID, Patient: currPatient};

				var json = JSON.stringify(currPatient);
				// Send the JSON Object to the Web Service
				logger.trace(&quot;JSON Routing to REST CLIENT: &quot; + json);
				resp = router.routeMessage(&quot;Rest Client&quot;, JSON.stringify(currMessage));
				if (resp) {
					logger.trace(&quot;Response from REST Channel: &quot; + resp.getMessage());
				}
			}
			return true;
		}
	}
	catch(ex) {
		logger.error(&quot;PKS - Select_CDS_Data - Exception: &quot; + ex);
		throw ex;
	}
	finally {
	//	dbConn.close();
	}

}
</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.5.1">
            <id>6f972e07-5a81-4de6-928c-f0135dd43747</id>
            <name>Stop_File_Reader</name>
            <revision>1</revision>
            <lastModified>
              <time>1531661693108</time>
              <timezone>Australia/Sydney</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>CHANNEL_DEPLOY</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>function Change_State(Channel, State) {
	const threadSleepTime = 10000; // ten seconds
	const millisecondsPerMinute = 60000;
	const maxAttempts = ($(&apos;CDS_Max_Wait_Minutes&apos;) * millisecondsPerMinute) / threadSleepTime;

	var attempts = 0;
	var channelState;

	channelState = ChannelUtil.getChannelState(Channel);
	if (channelState == State) {
		logger.debug(&apos;Channel already &apos; + State + &apos; no need to change state.&apos;);
		return true;
	} else {
		// Channel is running, need to check whether there are records to process...
		if (State == &quot;Started&quot;){
			logger.info(&apos;Starting Channel: &apos; + Channel);
			ChannelUtil.startChannel(Channel);
		} else {
			logger.info(&apos;Stopping Channel: &apos; + Channel);
			ChannelUtil.stopChannel(Channel);
		}
		channelState = ChannelUtil.getChannelState(Channel);
		while ((channelState != State) &amp;&amp; (attempts &lt; maxAttempts)) {
			logger.debug(&quot;Waiting for channel &quot; + Channel);
			channelState = ChannelUtil.getChannelState(Channel);
			if (channelState != State) {
				java.lang.Thread.sleep(threadSleepTime);
			}

			attempts ++;
		}
		logger.debug(&apos;Channel &apos; + Channel + &apos; is &apos; + channelState);
		if (channelState == State) {
			logger.debug(&apos;Successfully changed state of &apos; + Channel);
			return true;
		} else {
			return false;
		}
	}
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.5.1">
            <id>4c706164-e5b5-4de5-ab21-b0c64c8be231</id>
            <name>Update_CDS_Status</name>
            <revision>1</revision>
            <lastModified>
              <time>1531661693270</time>
              <timezone>Australia/Sydney</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>CHANNEL_PREPROCESSOR</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>GLOBAL_PREPROCESSOR</contextType>
                <contextType>CHANNEL_DEPLOY</contextType>
                <contextType>GLOBAL_POSTPROCESSOR</contextType>
                <contextType>CHANNEL_POSTPROCESSOR</contextType>
                <contextType>CHANNEL_ATTACHMENT</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>GLOBAL_DEPLOY</contextType>
                <contextType>GLOBAL_UNDEPLOY</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>CHANNEL_BATCH</contextType>
                <contextType>CHANNEL_UNDEPLOY</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>function Update_CDS_Status(ResponseStatus, currBatchSeq, currEpisodeID) {
	logger.trace(&quot;Resp Status: &quot; + ResponseStatus);

	var cdsStatus;

    if (ResponseStatus != &quot;SENT&quot;) {
		cdsStatus = &quot;E&quot;;
		logger.trace(&quot;Response code from web service call was not SENT, response:&quot; + ResponseStatus);
		// Call the stored proc setting the status to &quot;E&quot; for the error cases
		var dbConn = Get_CDS_Connection();
		try {
			var returnValue = 1;
			var sqlQuery = &quot;call rd_staging.rdUpdCDSStatus(&quot; + currBatchSeq + &quot;,&apos;&quot; + currEpisodeID + &quot;&apos;,&apos;&quot; + cdsStatus + &quot;&apos;)&quot;;

			logger.trace(&quot;SQL &quot; + sqlQuery);

			var sqlResult = dbConn.executeCachedQuery(sqlQuery);
			if (sqlResult.next()) {
				logger.debug(&quot;PKS - Update_CDS_Status - Info: &quot; + sqlResult.getString(&quot;Message&quot;));
			}
		}
		finally {
		//	dbConn.close();
		}
	}
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.5.1">
            <id>7deb66ed-ae5a-4ab6-830a-5fd343bd25ff</id>
            <name>Utilities</name>
            <revision>1</revision>
            <lastModified>
              <time>1531661693158</time>
              <timezone>Australia/Sydney</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>GLOBAL_DEPLOY</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>CHANNEL_DEPLOY</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>function Escape_String(str) {
		// Replace the following...
		// &apos; - Single quote
		// &quot; - Double quote
		// % - Percent
		// _ - Underscore
		// ; - Semi colon
		// No need to replace carriage returns, linefeeds and tabs as the incoming file is tab separated and row terminators
		// are carriage returns and linefeeds
		return str ? String(str).replace(/(&apos;|&quot;|\%|\_|\;)/g, &apos;\\$1&apos;) : str;
		}

function transformTestValue(result) {
	if (result != null &amp;&amp; result != &apos;&apos;) {
		if (result.indexOf(&quot;,&quot;) &gt;= 0) {
			result = result.replace(/,/g, &quot;.&quot;);
		}
	}
	return result;
}

function transformRange(range) {
	if (range != null &amp;&amp; range != &apos;&apos;) {
		if (range.indexOf(&quot;,&quot;) &gt;= 0) {
			range = range.replace(/,/g, &quot;.&quot;);
		}
		if (!isValidRange(range)) {
			logger.error(&quot;Invalid range dropped:  &quot; + range + &quot;.  Data was stored without the range.&quot;);
			range = &quot;&quot;;
		}
	}
	return range;
}

function isValidRange(range) {
	var regex = /([\s|-]{0,1}\d{1,4}(\.\d{1,8}){0,1}\s{0,1}-\s{0,1}\d{1,4}(\.\d{1,8}){0,1}\s{0,1})|(\s{0,1}[&lt;&gt;]={0,1}\s{0,3}-{0,1}\d{1,4}(\.\d{1,8}){0,1})/;
	return regex.test(range);
}

function encryptString(originalValue) {
	encryptedValue = originalValue.replace(/0/g, &apos;q&apos;);
	encryptedValue = encryptedValue.replace(/1/g, &apos;w&apos;);
	encryptedValue = encryptedValue.replace(/2/g, &apos;e&apos;);
	encryptedValue = encryptedValue.replace(/3/g, &apos;r&apos;);
	encryptedValue = encryptedValue.replace(/4/g, &apos;t&apos;);
	encryptedValue = encryptedValue.replace(/5/g, &apos;y&apos;);
	encryptedValue = encryptedValue.replace(/6/g, &apos;u&apos;);
	encryptedValue = encryptedValue.replace(/7/g, &apos;i&apos;);
	encryptedValue = encryptedValue.replace(/8/g, &apos;o&apos;);
	encryptedValue = encryptedValue.replace(/9/g, &apos;p&apos;);
	encryptedValue = encryptedValue.replace(/q/g, &apos;a&apos;);
	encryptedValue = encryptedValue.replace(/w/g, &apos;s&apos;);
	encryptedValue = encryptedValue.replace(/e/g, &apos;d&apos;);
	encryptedValue = encryptedValue.replace(/r/g, &apos;f&apos;);
	encryptedValue = encryptedValue.replace(/t/g, &apos;g&apos;);
	encryptedValue = encryptedValue.replace(/y/g, &apos;h&apos;);
	encryptedValue = encryptedValue.replace(/u/g, &apos;j&apos;);
	encryptedValue = encryptedValue.replace(/i/g, &apos;k&apos;);
	encryptedValue = encryptedValue.replace(/o/g, &apos;l&apos;);
	encryptedValue = encryptedValue.replace(/p/g, &apos;z&apos;);
	encryptedValue = encryptedValue.replace(/a/g, &apos;x&apos;);
	encryptedValue = encryptedValue.replace(/s/g, &apos;c&apos;);
	encryptedValue = encryptedValue.replace(/d/g, &apos;v&apos;);
	encryptedValue = encryptedValue.replace(/f/g, &apos;b&apos;);
	encryptedValue = encryptedValue.replace(/g/g, &apos;n&apos;);
	encryptedValue = encryptedValue.replace(/h/g, &apos;m&apos;);
	encryptedValue = encryptedValue.replace(/j/g, &apos;9&apos;);
	encryptedValue = encryptedValue.replace(/k/g, &apos;8&apos;);
	encryptedValue = encryptedValue.replace(/l/g, &apos;7&apos;);
	encryptedValue = encryptedValue.replace(/z/g, &apos;6&apos;);
	encryptedValue = encryptedValue.replace(/x/g, &apos;5&apos;);
	encryptedValue = encryptedValue.replace(/c/g, &apos;4&apos;);
	encryptedValue = encryptedValue.replace(/v/g, &apos;3&apos;);
	encryptedValue = encryptedValue.replace(/b/g, &apos;2&apos;);
	encryptedValue = encryptedValue.replace(/n/g, &apos;1&apos;);
	encryptedValue = encryptedValue.replace(/m/g, &apos;0&apos;);
	encryptedValue = encryptedValue.replace(/0/g, &apos;q&apos;);
	encryptedValue = encryptedValue.replace(/1/g, &apos;w&apos;);
	encryptedValue = encryptedValue.replace(/2/g, &apos;e&apos;);
	encryptedValue = encryptedValue.replace(/3/g, &apos;r&apos;);
	encryptedValue = encryptedValue.replace(/4/g, &apos;t&apos;);
	encryptedValue = encryptedValue.replace(/5/g, &apos;y&apos;);
	encryptedValue = encryptedValue.replace(/6/g, &apos;u&apos;);
	encryptedValue = encryptedValue.replace(/7/g, &apos;i&apos;);
	encryptedValue = encryptedValue.replace(/8/g, &apos;o&apos;);
	encryptedValue = encryptedValue.replace(/9/g, &apos;p&apos;);
	encryptedValue = encryptedValue.replace(/m/g, &apos;a&apos;);
	encryptedValue = encryptedValue.replace(/n/g, &apos;s&apos;);
	encryptedValue = encryptedValue.replace(/b/g, &apos;d&apos;);
	encryptedValue = encryptedValue.replace(/v/g, &apos;f&apos;);
	encryptedValue = encryptedValue.replace(/c/g, &apos;g&apos;);
	encryptedValue = encryptedValue.replace(/x/g, &apos;h&apos;);
	encryptedValue = encryptedValue.replace(/z/g, &apos;j&apos;);
	encryptedValue = encryptedValue.replace(/l/g, &apos;k&apos;);
	encryptedValue = encryptedValue.replace(/k/g, &apos;l&apos;);
	encryptedValue = encryptedValue.replace(/j/g, &apos;z&apos;);
	encryptedValue = encryptedValue.replace(/h/g, &apos;x&apos;);
	encryptedValue = encryptedValue.replace(/g/g, &apos;c&apos;);
	encryptedValue = encryptedValue.replace(/f/g, &apos;v&apos;);
	encryptedValue = encryptedValue.replace(/d/g, &apos;b&apos;);
	encryptedValue = encryptedValue.replace(/s/g, &apos;n&apos;);
	encryptedValue = encryptedValue.replace(/a/g, &apos;m&apos;);
	encryptedValue = encryptedValue.replace(/p/g, &apos;9&apos;);
	encryptedValue = encryptedValue.replace(/o/g, &apos;8&apos;);
	encryptedValue = encryptedValue.replace(/i/g, &apos;7&apos;);
	encryptedValue = encryptedValue.replace(/u/g, &apos;6&apos;);
	encryptedValue = encryptedValue.replace(/y/g, &apos;5&apos;);
	encryptedValue = encryptedValue.replace(/t/g, &apos;4&apos;);
	encryptedValue = encryptedValue.replace(/r/g, &apos;3&apos;);
	encryptedValue = encryptedValue.replace(/e/g, &apos;2&apos;);
	encryptedValue = encryptedValue.replace(/w/g, &apos;1&apos;);
	encryptedValue = encryptedValue.replace(/q/g, &apos;0&apos;);
	return encryptedValue;
}

function calculate_age_in_years(dateOfBirth) {
	var today = new Date();
	var birthDate = new Date(dateOfBirth);
	var age = today.getFullYear() - birthDate.getFullYear();
	var m = today.getMonth() - birthDate.getMonth();
	if (m &lt; 0 || (m === 0 &amp;&amp; today.getDate() &lt; birthDate.getDate())) {
		age--;
	}
	return age;
}

function buildStringIfNotNull(value) {
	if (value == null || value == &apos;&apos;) {
		return null;
	}
	return &quot;&apos;&quot; + value + &quot;&apos;&quot;;
}

</code>
            </properties>
          </codeTemplate>
        </codeTemplates>
      </codeTemplateLibrary>
    </codeTemplateLibraries>
    <dependencyIds>
      <string>6df4f01c-e2ee-400b-8f23-547df6db1358</string>
    </dependencyIds>
  </exportData>
</channel>